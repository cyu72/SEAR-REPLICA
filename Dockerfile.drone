# Use a multi-stage build for better caching and smaller final image
FROM alpine:latest AS builder

# Install build dependencies
RUN apk add --no-cache \
    g++ \
    make \
    cmake \
    ninja \
    ccache \
    protobuf \
    protobuf-dev \
    git \
    openssl-dev \
    python3 \
    python3-dev \
    curl-dev

# Set up ccache
ENV CCACHE_DIR=/ccache
RUN mkdir -p /ccache

# Copy CMakeLists.txt and source files separately to leverage Docker cache
WORKDIR /app/drone_security_protocol/DroneRouting
COPY drone_security_protocol/DroneRouting/CMakeLists.txt .
COPY drone_security_protocol/DroneRouting/src ./src
COPY drone_security_protocol/DroneRouting/include ./include

# Build DroneRouting library
RUN mkdir build && cd build && \
    cmake -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          .. && \
    ninja -j$(nproc)

# Copy and build RRT-search
WORKDIR /app/drone_security_protocol/RRT-search
COPY drone_security_protocol/RRT-search/CMakeLists.txt .
COPY drone_security_protocol/RRT-search/rrt.cpp .
COPY drone_security_protocol/RRT-search/rrt.hpp .

RUN mkdir build && cd build && \
    cmake -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          .. && \
    ninja -j$(nproc)

# Create the final image
FROM alpine:latest

# Install runtime dependencies
RUN apk add --no-cache \
    libstdc++ \
    openssl \
    python3 \
    libcurl

# Copy built artifacts from the builder stage
COPY --from=builder /app/drone_security_protocol/DroneRouting/build/libdrone_routing.so /usr/local/lib/
COPY --from=builder /app/drone_security_protocol/RRT-search/build/bin/rrt /app/rrt
COPY --from=builder /usr/local/lib/libcpr.so* /usr/local/lib/

# Set the library path
ENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH

WORKDIR /app
EXPOSE 65456

# Update the dynamic linker run-time bindings
RUN ldconfig /usr/local/lib

CMD ["/app/rrt"]