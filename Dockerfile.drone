# Use a multi-stage build for better caching and smaller final image
FROM alpine:latest AS builder

WORKDIR /app

# Install build dependencies
RUN apk add --no-cache \
    g++ \
    make \
    cmake \
    protobuf \
    protobuf-dev \
    git \
    openssl-dev \
    python3 \
    python3-dev

# Copy and build DroneRouting library
COPY drone_security_protocol/DroneRouting /app/drone_security_protocol/DroneRouting
WORKDIR /app/drone_security_protocol/DroneRouting/build
RUN cmake .. && make

# # Copy and build RRT-search
COPY drone_security_protocol/RRT-search /app/drone_security_protocol/RRT-search
WORKDIR /app/drone_security_protocol/RRT-search/build
RUN cmake .. && make

# Create the final image
FROM alpine:latest

# Install runtime dependencies
RUN apk add --no-cache \
    libstdc++ \
    openssl \
    python3

# Copy built artifacts from the builder stage
COPY --from=builder /app/drone_security_protocol/DroneRouting/build/libdrone_routing.so /usr/local/lib/
COPY --from=builder /app/drone_security_protocol/RRT-search/build/bin/rrt /app/rrt

# Set the library path
ENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH

WORKDIR /app
EXPOSE 65456

CMD ["/app/rrt"]